import streamlit as st
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array, load_img

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ layout ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="IS_ML/NN Project", layout="wide")

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV -----
@st.cache_data
def load_data(file_path):
    return pd.read_csv(file_path)

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Financial Data -----
def prepare_financial_dataset(df):
    df['StockPrice'] = df['StockPrice'].fillna(df['StockPrice'].mean())
    df['Income'] = df['Income'].fillna(df['Income'].mean())
    df['Expense'] = df['Expense'].fillna(df['Expense'].mean())
    return df

# ----- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Synthetic Digit Images) -----
@st.cache_resource
def load_cnn_model():
    model_path = "models/digit_count_cnn.h5"
    if os.path.exists(model_path):
        return load_model(model_path)
    return None

# ----- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Navigation -----
tabs = st.tabs([
    "üè† Home", 
    "üìò ML Explanation", 
    "üìô NN Explanation", 
    "ü§ñ ML Model Demo", 
    "üß† NN Model Demo"
])

# ==========================================================
# Tab 1: Overview
# ==========================================================
with tabs[0]:
    st.title("üîç Overview ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ")
    st.markdown("""
    **1. ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á Dataset:**  
    - Dataset ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏î‡∏¢ **ChatGPT**

    **2. Feature ‡∏Ç‡∏≠‡∏á Dataset:**  
    - **Financial Data:**  
      - **ID:** ‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•  
      - **StockPrice:** ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô (numeric)  
      - **Income:** ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö (numeric)  
      - **Expense:** ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ (numeric)  
      - **NetProfit:** ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Income - Expense ‡∏û‡∏£‡πâ‡∏≠‡∏° noise ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
      
    - **Synthetic Digit Images:**  
      - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î 64x64 pixel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å MNIST ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏û  
      - **Label:** ‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏ô‡∏≤‡∏î 10 ‡∏Ñ‡πà‡∏≤ ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß (0-9)

    **3. ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á Dataset:**  
    - **Financial Data:**  
      - ‡∏°‡∏µ missing values ‡πÉ‡∏ô StockPrice, Income, ‡πÅ‡∏•‡∏∞ Expense (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 10%)  
    - **Synthetic Digit Images:**  
      - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô  
      - ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á label ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    """)

# ==========================================================
# Tab 2: Machine Learning Explanation (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Financial Data)
# ==========================================================
with tabs[1]:
    st.title("üìò Machine Learning Explanation")
    
    st.subheader("Financial Data (Decision Tree & K-Means)")
    st.markdown("""
    **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:**  
    1. **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**  
       - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏° missing values ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö StockPrice, Income, ‡πÅ‡∏•‡∏∞ Expense
       - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì NetProfit (Income - Expense + noise) ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á target ‡πÉ‡∏´‡∏°‡πà **Profit_Class**  
         ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ Profit_Class = 1 ‡∏´‡∏≤‡∏Å NetProfit ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ median, ‡πÅ‡∏•‡∏∞ 0 ‡∏´‡∏≤‡∏Å‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤

    2. **‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°:**  
       - **Decision Tree:**  
         ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Classification) ‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° feature ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏ö‡∏™‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à  
       - **K-Means Clustering:**  
         ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° (Unsupervised Learning) ‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á feature

    3. **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•:**  
       - ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô training/test set  
       - ‡∏ù‡∏∂‡∏Å Decision Tree ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Profit_Class  
       - ‡∏ù‡∏∂‡∏Å K-Means ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô  
       - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏•‡∏∏‡πà‡∏° (cluster analysis)

    """)

    st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Dataset Financial Data ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    df_financial = load_data("data/financial_dataset.csv")
    st.dataframe(df_financial.head(10))

    st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Dataset Financial Data ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    df_financial = load_data("data/financial_dataset_prepared.csv")
    st.dataframe(df_financial.head(10))

# ==========================================================
# Tab 3: Neural Network Explanation (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Synthetic Digit Images)
# ==========================================================
with tabs[2]:
    st.title("üìô Neural Network Explanation")
    
    st.subheader("Synthetic Digit Images (CNN)")
    st.markdown("""
    **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:**  
    1. **‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**  
       - ‡∏™‡∏£‡πâ‡∏≤‡∏á synthetic image ‡πÇ‡∏î‡∏¢‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å MNIST ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏≤‡∏á‡∏•‡∏á‡∏ö‡∏ô canvas ‡∏Ç‡∏ô‡∏≤‡∏î 64x64 pixel  
       - ‡∏™‡∏£‡πâ‡∏≤‡∏á label vector ‡∏Ç‡∏ô‡∏≤‡∏î 10 ‡∏Ñ‡πà‡∏≤ ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡∏†‡∏≤‡∏û  
       - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á label (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà label ‡∏´‡∏≤‡∏¢) ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå [0, 0, ..., 0] ‡∏ã‡∏∂‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏†‡∏≤‡∏û

    2. **‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° (CNN):**  
       - ‡πÉ‡∏ä‡πâ Convolutional Neural Network (CNN) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û  
       - ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Convolutional Layers, MaxPooling Layers, Flatten, Dense Layers ‡πÅ‡∏•‡∏∞ Dropout

    3. **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•:**  
       - ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ label  
       - ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° CNN ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î hyperparameters  
       - ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ test set
       - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û
       - ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡∏Ç‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0.5 ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
    """)

    st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Dataset Synthetic Digit Images ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    df_labels = load_data("data/digits/labels.csv")
    st.dataframe(df_labels.head(10))
    num_examples = 5
    for index, row in df_labels.head(num_examples).iterrows():
        st.markdown(f"**Filename:** {row['filename']} | **Label:** {row['label']}")
        image_path = os.path.join("data/digits/images", row["filename"])
        st.image(image_path, caption=row["filename"], width=150)


    st.subheader("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Dataset Synthetic Digit Images ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    df_labels = load_data("data/digits/labels_prepared.csv")
    st.dataframe(df_labels.head(10))
    num_examples = 5
    for index, row in df_labels.head(num_examples).iterrows():
        st.markdown(f"**Filename:** {row['filename']} | **Label:** {row['label']}")
        image_path = os.path.join("data/digits/images", row["filename"])
        st.image(image_path, caption=row["filename"], width=150)

# ==========================================================
# Tab 4: Demo Machine Learning Model (Financial Data)
# ==========================================================
with tabs[3]:
    st.title("ü§ñ Demo ML Model (Financial Data)")
    
    st.markdown("## ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: Decision Tree Classification")
    st.markdown("""
    ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Financial Data ‡∏ó‡∏µ‡πà‡∏°‡∏µ feature **StockPrice**, **Income** ‡πÅ‡∏•‡∏∞ **Expense**  
    ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì **NetProfit** ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á target ‡πÉ‡∏´‡∏°‡πà **Profit_Class**  
    (Profit_Class = 1 ‡∏´‡∏≤‡∏Å NetProfit ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤ median, 0 ‡∏´‡∏≤‡∏Å‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤)  
    ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Profit_Class  
    """)
    
    with st.form("form_dt"):
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("**‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Decision Tree**")
            dt_max_depth = st.slider("Max Depth", min_value=1, max_value=20, value=5, step=1)
            dt_min_samples_split = st.slider("Min Samples Split", min_value=2, max_value=20, value=2, step=1)
        with col2:
            st.markdown("**‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ Feature**")
            input_stock = st.number_input("StockPrice", value=200.0, key="dt_stock_input")
        with col3:
            st.markdown("**‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ Feature**")
            input_income = st.number_input("Income", value=75000.0, key="dt_income_input")
            input_expense = st.number_input("Expense", value=50000.0, key="dt_expense_input")
        submitted_dt = st.form_submit_button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Decision Tree")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Financial Data
    df_financial_demo = load_data("data/financial_dataset_prepared.csv")
    df_financial_demo = prepare_financial_dataset(df_financial_demo)
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Profit_Class ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ median ‡∏Ç‡∏≠‡∏á NetProfit
    median_profit = df_financial_demo['NetProfit'].median()
    df_financial_demo['Profit_Class'] = (df_financial_demo['NetProfit'] >= median_profit).astype(int)
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° features ‡πÅ‡∏•‡∏∞ target ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
    X_financial = df_financial_demo[['StockPrice', 'Income', 'Expense']]
    y_financial = df_financial_demo['Profit_Class']
    X_train, X_test, y_train, y_test = train_test_split(X_financial, y_financial, test_size=0.2, random_state=42)
    
    dt_model = DecisionTreeClassifier(max_depth=dt_max_depth, min_samples_split=dt_min_samples_split, random_state=42)
    dt_model.fit(X_train, y_train)
    
    if submitted_dt:
        input_features = np.array([[input_stock, input_income, input_expense]])
        prediction = dt_model.predict(input_features)[0]
        result = "High Profit" if prediction == 1 else "Low Profit"
        st.success(f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Profit_Class: {result}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á Decision Tree
        fig_tree, ax_tree = plt.subplots(figsize=(12,8))
        plot_tree(dt_model, filled=True, feature_names=['StockPrice', 'Income', 'Expense'], class_names=["Low Profit", "High Profit"])
        st.pyplot(fig_tree)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
        importances = dt_model.feature_importances_
        fig_imp, ax_imp = plt.subplots(figsize=(8,6))
        ax_imp.bar(['StockPrice', 'Income', 'Expense'], importances, color='skyblue')
        ax_imp.set_title("Feature Importances in Decision Tree")
        st.pyplot(fig_imp)
    
    st.markdown("---")
    st.markdown("## ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: K-Means Clustering ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Financial Data")
    n_clusters = st.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå", min_value=2, max_value=10, value=3, step=1, key="km_clusters")
    if st.button("‡∏£‡∏±‡∏ô K-Means", key="btn_km"):
        X_financial_all = df_financial_demo[['StockPrice', 'Income', 'Expense']]
        kmeans_model = KMeans(n_clusters=n_clusters, random_state=42)
        clusters = kmeans_model.fit_predict(X_financial_all)
        df_financial_demo['Cluster'] = clusters
        st.success(f"K-Means ‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô {n_clusters} ‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß")
        # Visualization ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Income ‡∏Å‡∏±‡∏ö Expense ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        fig_km, ax_km = plt.subplots(figsize=(8,6))
        sns.scatterplot(x='Income', y='Expense', hue='Cluster', data=df_financial_demo, palette='viridis', ax=ax_km)
        ax_km.set_title("K-Means Clustering (Income vs Expense)")
        st.pyplot(fig_km)

# ==========================================================
# Tab 5: Demo Neural Network Model (Synthetic Digit Images)
# ==========================================================
with tabs[4]:
    st.title("üß† Demo NN Model (Synthetic Digit Images)")
    
    # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Synthetic Digit Images
    df_labels = load_data("data/digits/labels_prepared.csv")
    image_options = df_labels["filename"].tolist()
    selected_image = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û", image_options)
    
    # ‡∏î‡∏∂‡∏á label ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
    selected_label = df_labels[df_labels["filename"] == selected_image]["label"].values[0]
    st.markdown(f"**Label ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û:** {selected_label}")
    
    image_path = os.path.join("data/digits/images", selected_image)
    img = load_img(image_path, color_mode="grayscale", target_size=(64, 64))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    
    st.image(image_path, caption=f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {selected_image}", use_container_width=False)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö synthetic digit counting
    cnn_model = load_cnn_model()
    if cnn_model is None:
        st.error("‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡πà‡∏≠‡∏ô")
    else:
        if st.button("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏†‡∏≤‡∏û", key="btn_cnn"):
            prediction = cnn_model.predict(img_array)[0]
            st.success(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå: {np.round(prediction, 2)}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡∏Ç
            predicted_digits = {str(i): int(round(count)) for i, count in enumerate(prediction) if count > 0.5}
            st.markdown("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡∏Ç:")
            for digit, count in predicted_digits.items():
                st.markdown(f"‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç {digit}: {count} ‡∏ï‡∏±‡∏ß")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
            fig, ax = plt.subplots(figsize=(10,6))
            ax.bar(range(10), prediction, color='skyblue')
            ax.set_xlabel("Number (0-9)")
            ax.set_ylabel("Prediction value")
            ax.set_title("Predicting the number of digits in an image")
            st.pyplot(fig)


